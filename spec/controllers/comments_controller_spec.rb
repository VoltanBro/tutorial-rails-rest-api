require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Api::V1::CommentsController, type: :controller do
  include ApiHelper

  let(:user){
    create(:user)
  }

  let(:first_post){
    create(:post)
  }

  let(:comment) {
    create(:comment)
  }

  let(:comments) {
    create_list(:comment, 20)
  }

  # let(:valid_attributes) {
  #   {body: "sample body", user: user, post: post}
  # }
  let(:valid_attributes) {
    {body: "sample body", user_id: user.id, post_id: first_post.id}
  }

  let(:invalid_attributes) {
    {body: "", post_id: first_post.id}
  }

  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      authenticated_header(request: request, user: user)
      get :index, params: {post_id: first_post.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      authenticated_header(request: request, user: user)
      comment = Comment.create! valid_attributes
      get :show, params: {id: comment.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Comment" do
        authenticated_header(user: user, request: request)
        expect {
          post :create, params: {comment: valid_attributes}, session: valid_session
        }.to change(Comment, :count).by(1)
      end

      it "renders a JSON response with the new comment" do
        authenticated_header(request: request, user: user)
        post :create, params: {comment: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to include('application/json')
        expect(response.location).to eq(comment_url(Comment.last))
      end
    end

    context "with invalid params" do
      it "renders a JSON response with errors for the new comment" do
        authenticated_header(request: request, user: user)
        post :create, params: {comment: invalid_attributes}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to include('application/json')
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {body: "updated sample body", user_id: user.id}
      }

      it "updates the requested comment" do
        authenticated_header(request: request, user: user)
        comment = Comment.create! valid_attributes

        put :update, params: {id: comment.to_param, comment: new_attributes}, session: valid_session
        comment.reload
        expect(comment.body).to eq(new_attributes[:body])
      end

      it "renders a JSON response with the comment" do
        authenticated_header(request: request, user: user)
        comment = Comment.create! valid_attributes

        put :update, params: {id: comment.to_param, comment: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to include('application/json')
      end
    end

    context "with invalid params" do
      it "renders a JSON response with errors for the comment" do
        authenticated_header(request: request, user: user)
        comment = Comment.create! valid_attributes

        put :update, params: {id: comment.to_param, comment: invalid_attributes}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to include('application/json')
      end
    end

    context "with invalid Authorize" do
      let(:another_user){
        create(:user)
      }
      it "renders a JSON response with errors (http code 403, Forbidden) for the post" do
        authenticated_header(user: another_user, request: request)
        comment = Comment.create! valid_attributes

        put :update, params: {id: comment.to_param, comment: invalid_attributes}, session: valid_session
        expect(response).to have_http_status(:forbidden)
        expect(response.content_type).to include('application/json')
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested comment" do
      authenticated_header(request: request, user: user)
      comment = Comment.create! valid_attributes
      expect {
        delete :destroy, params: {id: comment.to_param}, session: valid_session
      }.to change(Comment.published, :count).by(-1)
    end
  end

end
